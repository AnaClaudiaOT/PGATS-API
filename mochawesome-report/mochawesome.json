{
  "stats": {
    "suites": 7,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T02:50:15.320Z",
    "end": "2025-09-19T02:50:15.475Z",
    "duration": 155,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "485d51d3-9539-46a9-bba2-a37a916e8d9d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c9a7afa3-d4cd-4810-bab5-79b9a69da1d5",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\controller\\transfer.controller.test.js",
          "file": "\\test\\controller\\transfer.controller.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"before each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Realiza login e armazena o token para cada teste\nconst respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"Ana\",\n  password: \"123456\",\n});\ntoken = respostaLogin.body.token;",
              "err": {},
              "uuid": "dc0d318c-2624-4670-9e9f-08917da62b25",
              "parentUUID": "c9a7afa3-d4cd-4810-bab5-79b9a69da1d5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5da6ae83-c83b-40f8-b077-dfaf0b3e4e86",
              "title": "POST - Transfer",
              "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\controller\\transfer.controller.test.js",
              "file": "\\test\\controller\\transfer.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatário invalido recebo 400",
                  "fullTitle": "Transfer Controller POST - Transfer Quando informo remetente e destinatário invalido recebo 400",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"João\",\n    value: 6000,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "03586f78-5c1d-4680-b5ed-0dc775829fcd",
                  "parentUUID": "5da6ae83-c83b-40f8-b077-dfaf0b3e4e86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatário invalido recebo 400",
                  "fullTitle": "Transfer Controller POST - Transfer Usando Mocks: Quando informo remetente e destinatário invalido recebo 400",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, \"transfer\");\ntransferServiceMock.throws(new Error(\"Usuário não encontrado\"));\nconst resposta = await request(app)\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"João\",\n    value: 6000,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\"error\", \"Usuário não encontrado\");\n// Reseto o Mock\nsinon.restore();",
                  "err": {},
                  "uuid": "ee98fb0f-db5f-4f56-aa40-8978aaf859d9",
                  "parentUUID": "5da6ae83-c83b-40f8-b077-dfaf0b3e4e86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST - Transfer Usando Mocks: Quando valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, \"transfer\");\ntransferServiceMock.returns({\n  from: \"Ana\",\n  to: \"Lucas\",\n  value: 6000,\n  date: new Date(),\n});\nconst resposta = await request(app)\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"Lucas\",\n    value: 6000,\n  });\nconsole.log(resposta.body);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property(\"from\", \"Ana\");\nexpect(resposta.body).to.have.property(\"to\", \"Lucas\");\nexpect(resposta.body).to.have.property(\"value\", 6000);\n// Reseto o Mock\nsinon.restore();",
                  "err": {},
                  "uuid": "8d8ebc4a-80d1-4d39-83ae-238cbf423ca7",
                  "parentUUID": "5da6ae83-c83b-40f8-b077-dfaf0b3e4e86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks - Validação com Json: Quando valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST - Transfer Usando Mocks - Validação com Json: Quando valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Preparando os Dados\n// Carregar o arquivo compare.json\n// Preparar a forma de ignorar os campos dinamicos\n// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, \"transfer\");\ntransferServiceMock.returns({\n  from: \"Ana\",\n  to: \"Lucas\",\n  value: 6000,\n  date: new Date(),\n});\nconst resposta = await request(app)\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"Lucas\",\n    value: 6000,\n  });\nexpect(resposta.status).to.equal(201);\n// Implementando validação através do arquivo json\nconst respostaEsperada = require(\"../fixtures/respostas/compare.json\");\ndelete resposta.body.date;\ndelete respostaEsperada.date;\n// Somente um expect para comparar a resposta.body com a String contida no arquivo compare.json\nexpect(resposta.body).to.eql(respostaEsperada);\n// Reseto o Mock\nsinon.restore();",
                  "err": {},
                  "uuid": "92a14b30-1a4e-423f-93f1-62e6d836b580",
                  "parentUUID": "5da6ae83-c83b-40f8-b077-dfaf0b3e4e86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03586f78-5c1d-4680-b5ed-0dc775829fcd",
                "ee98fb0f-db5f-4f56-aa40-8978aaf859d9",
                "8d8ebc4a-80d1-4d39-83ae-238cbf423ca7",
                "92a14b30-1a4e-423f-93f1-62e6d836b580"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a0e5e46-1ed1-4365-8e44-059bb1f6fdaa",
              "title": "GET - transfers",
              "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\controller\\transfer.controller.test.js",
              "file": "\\test\\controller\\transfer.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando consulto transferências inexistentes",
                  "fullTitle": "Transfer Controller GET - transfers Quando consulto transferências inexistentes",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app).post(\"/users/login\").send({\n  username: \"Ana\",\n  password: \"123456\",\n});\nconst token = respostaLogin.body.token;\nconst resposta = await request(app)\n  .get(\"/transfers\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"Lucas\",\n    value: 100,\n  });\nexpect(resposta.status).to.equal(404);\nexpect(resposta.body).to.have.property(\n  \"error\",\n  \"Nenhuma transferência encontrada\"\n);\nconsole.log(resposta.body);",
                  "err": {},
                  "uuid": "9c422741-d88d-4bdd-9595-36861504157e",
                  "parentUUID": "9a0e5e46-1ed1-4365-8e44-059bb1f6fdaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c422741-d88d-4bdd-9595-36861504157e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b63e9f2-aa3b-442b-994d-ffbb9ff0d48e",
          "title": "User Controller",
          "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\controller\\user.controller.test.js",
          "file": "\\test\\controller\\user.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37100ca8-06e1-47f8-8578-838ee0b39aef",
              "title": "POST - users",
              "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\controller\\user.controller.test.js",
              "file": "\\test\\controller\\user.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cadastrando usuário",
                  "fullTitle": "User Controller POST - users Cadastrando usuário",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app).post(\"/users/register\").send({\n  username: \"Fabio\",\n  password: \"Lucas\",\n  favorecido: true,\n});\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property(\"message\", \"Usuário registrado\");",
                  "err": {},
                  "uuid": "018edb7d-4d57-4e1b-b0e4-1775a72e872d",
                  "parentUUID": "37100ca8-06e1-47f8-8578-838ee0b39aef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Login de usuário",
                  "fullTitle": "User Controller POST - users Login de usuário",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app).post(\"/users/login\").send({\n  username: \"Fabio\",\n  password: \"Lucas\",\n  favorecido: true,\n});\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property(\n  \"message\",\n  \"Login realizado com sucesso\"\n);",
                  "err": {},
                  "uuid": "7358c9d6-9e37-4718-b348-c11cbd7cea5a",
                  "parentUUID": "37100ca8-06e1-47f8-8578-838ee0b39aef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Login de usuário inválido",
                  "fullTitle": "User Controller POST - users Login de usuário inválido",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app).post(\"/users/login\").send({\n  username: \"\",\n  password: \"\",\n  favorecido: true,\n});\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\n  \"error\",\n  \"Informe usuário e senha\"\n);",
                  "err": {},
                  "uuid": "3f64070d-e767-449c-b096-fe60a14f91c9",
                  "parentUUID": "37100ca8-06e1-47f8-8578-838ee0b39aef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "018edb7d-4d57-4e1b-b0e4-1775a72e872d",
                "7358c9d6-9e37-4718-b348-c11cbd7cea5a",
                "3f64070d-e767-449c-b096-fe60a14f91c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eb050c94-dd7c-4b09-9472-e6ed7e177471",
          "title": "Transfer - External",
          "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\external\\transfer-external.controller.test.js",
          "file": "\\test\\external\\transfer-external.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a937c5bb-5fb7-4d54-9362-3c27ee10c1a3",
              "title": "POST - transfer",
              "fullFile": "C:\\Users\\Ana\\Documents\\PGATS-API\\test\\external\\transfer-external.controller.test.js",
              "file": "\\test\\external\\transfer-external.controller.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST - transfer\"",
                  "fullTitle": "Transfer - External POST - transfer \"before each\" hook in \"POST - transfer\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Reseta o banco de dados do servidor externo\nawait request(\"http://localhost:3000\").post(\"/__reset__\");\nconst respostaLogin = await request(\"http://localhost:3000\")\n  .post(\"/users/login\")\n  .send({\n    username: \"Ana\",\n    password: \"123456\",\n  });\ntoken = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "48cc43b6-7e5e-4df1-9bdd-45d00b989732",
                  "parentUUID": "a937c5bb-5fb7-4d54-9362-3c27ee10c1a3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Teste no servidor - Quando informo remetente e destinatário invalido recebo 400",
                  "fullTitle": "Transfer - External POST - transfer Teste no servidor - Quando informo remetente e destinatário invalido recebo 400",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 1) Capturar Token\nconst respostaLogin = await request(\"http://localhost:3000\")\n  .post(\"/users/login\")\n  .send({\n    username: \"Ana\",\n    password: \"123456\",\n  });\nconst token = respostaLogin.body.token;\nconst resposta = await request(\"http://localhost:3000\")\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"João\",\n    value: 6000,\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property(\"error\", \"Usuário não encontrado\");",
                  "err": {},
                  "uuid": "69445f1b-4327-450f-805e-c64c44a6808a",
                  "parentUUID": "a937c5bb-5fb7-4d54-9362-3c27ee10c1a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer - External POST - transfer Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"Lucas\",\n    value: 100,\n  });\nconsole.log(resposta.body);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property(\"from\", \"Ana\");\nexpect(resposta.body).to.have.property(\"to\", \"Lucas\");\nexpect(resposta.body).to.have.property(\"value\", 100);",
                  "err": {},
                  "uuid": "3b9df3f2-f229-4f29-bffa-7f4ec643db5b",
                  "parentUUID": "a937c5bb-5fb7-4d54-9362-3c27ee10c1a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validação com Json: Quando valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer - External POST - transfer Validação com Json: Quando valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n  .post(\"/transfer\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({\n    from: \"Ana\",\n    to: \"Lucas\",\n    value: 6000,\n  });\nexpect(resposta.status).to.equal(201);\n// Implementando validação através do arquivo json\nconst respostaEsperada = require(\"../fixtures/respostas/compare.json\");\ndelete resposta.body.date;\ndelete respostaEsperada.date;\n// Somente um expect para comparar a resposta.body com a String contida no arquivo compare.json\nexpect(resposta.body).to.eql(respostaEsperada);",
                  "err": {},
                  "uuid": "c28852d3-adfd-4aa4-9472-d334112c2468",
                  "parentUUID": "a937c5bb-5fb7-4d54-9362-3c27ee10c1a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69445f1b-4327-450f-805e-c64c44a6808a",
                "3b9df3f2-f229-4f29-bffa-7f4ec643db5b",
                "c28852d3-adfd-4aa4-9472-d334112c2468"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}